#include <stdio.h>
#include <stdlib.h>

#define MAX 20  // Tamaño máximo para subconjuntos

// Variables globales para estadísticas
int soluciones = 0;
int nodos = 0;

// Función para imprimir un subconjunto y su suma
void imprimirSubconjunto(int* conjunto, int tam, int suma) {
    printf("[");
    for (int i = 0; i < tam; i++) {
        printf("%d", conjunto[i]);
        if (i < tam - 1) printf(", ");
    }
    printf("] Suma: %d\n", suma);
}

typedef struct {
    int elementos[MAX];  // 0 o 1, indicando inclusión
    int suma;            // suma total (debe ser igual a W)
} Solucion;

Solucion soluciones[MAX];
int total_soluciones = 0;

int W, n, delta,include[MAX], input[MAX];

// ========================
// VARIANTE 1: Basica
// ========================

void escribirSol() {
    for (int i = 0; i < n; i++) {
        soluciones[total_soluciones].elementos[i] = include[i];
    }
    soluciones[total_soluciones].suma = W;
    total_soluciones++;
}

int promising(int i, int A, int pendiente) {
    return (((A + pendiente) >= W) && ((A == W) || (A + input[i + 1] <= W)));
}

int sumaSub(int i, int A, int pendiente) {
    if (promising(i, A, pendiente)) {
        if (A == W) {
            escribirSol();
            return 0;
        }
        else {
            //Incluye el siguiente elemento
            include[i + 1] = 1;
            sumaSub(i + 1, A + input[i + 1], pendiente - input[i + 1]);

            //Excluye el siguiente elemento
            include[i + 1] = 0;
            sumaSub(i + 1, A, pendiente - input[i + 1]);
        }
    }
}



// ========================
// VARIANTE 2: Delta
// ========================
void guardar_solucion() {
    for (int i = 0; i < n; i++) {
        soluciones[total_soluciones].elementos[i] = include[i];
    }
    soluciones[total_soluciones].suma = 0;
    for (int i = 0; i < n; i++) {
        if (include[i]) soluciones[total_soluciones].suma += input[i];
    }
    total_soluciones++;
}

int promising(int i, int A, int pendiente) {
    return ((A + pendiente >= W - delta) && (A <= W + delta));
}

void sumaSubDelta(int i, int A, int pendiente) {
    if (promising(i, A, pendiente)) {
        if (A >= W - delta && A <= W + delta) {
            guardar_solucion();
        }
        // Incluir el siguiente
        if (i + 1 < n) {
            include[i + 1] = 1;
            sumaSubDelta(i + 1, A + input[i + 1], pendiente - input[i + 1]);

            // No incluirlo
            include[i + 1] = 0;
            sumaSubDelta(i + 1, A, pendiente - input[i + 1]);
        }
    }
}

// ========================
// VARIANTE 3: Mayor o Igual
// ========================
void sumaSubconjuntosV3(int* A, int n, int W, int index, int* actual, int tam_actual, int suma_actual) {
    nodos++;

    if (suma_actual >= W) {
        soluciones++;
        imprimirSubconjunto(actual, tam_actual, suma_actual);
        // No retornamos: seguimos buscando subconjuntos más grandes
    }

    for (int i = index; i < n; i++) {
        actual[tam_actual] = A[i];
        sumaSubconjuntosV3(A, n, W, i + 1, actual, tam_actual + 1, suma_actual + A[i]);
    }
}

// ====================================
// VARIANTE 4: Mayor o Igual Acotado
// ====================================
void sumaSubconjuntosV4(int* A, int n, int W, int index, int* actual, int tam_actual, int suma_actual) {
    nodos++;

    if (suma_actual >= W) {
        soluciones++;
        imprimirSubconjunto(actual, tam_actual, suma_actual);
        return;  // Ya no agregamos más elementos: solución mínima encontrada
    }

    for (int i = index; i < n; i++) {
        actual[tam_actual] = A[i];
        sumaSubconjuntosV4(A, n, W, i + 1, actual, tam_actual + 1, suma_actual + A[i]);
    }
}

// ============================
// FUNCIÓN DE PRUEBA EN CONSOLA
// ============================
int main() {
    int A[] = {3, 1, 2, 5};  // Puedes modificar este conjunto para pruebas
    int n = 4;
    int W = 6;
    int subconjunto[MAX];

    printf("=== VARIANTE 3: Mayor o Igual ===\n");
    soluciones = 0;
    nodos = 0;
    sumaSubconjuntosV3(A, n, W, 0, subconjunto, 0, 0);
    printf("Total de soluciones: %d\n", soluciones);
    printf("Nodos visitados: %d\n\n", nodos);

    printf("=== VARIANTE 4: Mayor o Igual Acotado ===\n");
    soluciones = 0;
    nodos = 0;
    sumaSubconjuntosV4(A, n, W, 0, subconjunto, 0, 0);
    printf("Total de soluciones: %d\n", soluciones);
    printf("Nodos visitados: %d\n", nodos);

    return 0;
}
